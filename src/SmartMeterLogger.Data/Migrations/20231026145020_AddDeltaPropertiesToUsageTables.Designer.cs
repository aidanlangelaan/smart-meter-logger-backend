// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartMeterLogger.Data;

#nullable disable

namespace Smartmeter.Data.Migrations
{
    [DbContext(typeof(SmartMeterLoggerDbContext))]
    [Migration("20231026145020_AddDeltaPropertiesToUsageTables")]
    partial class AddDeltaPropertiesToUsageTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SmartMeterLogger.Data.Entities.ElectricityMeter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<sbyte>("DsmrVersion")
                        .HasColumnType("tinyint");

                    b.Property<int>("MeterId")
                        .HasColumnType("int");

                    b.Property<int>("NrPowerfailures")
                        .HasColumnType("int");

                    b.Property<int?>("NrPowerfailuresLong")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("NrVoltageSagsL1")
                        .HasColumnType("int");

                    b.Property<int?>("NrVoltageSagsL2")
                        .HasColumnType("int");

                    b.Property<int?>("NrVoltageSagsL3")
                        .HasColumnType("int");

                    b.Property<int>("NrVoltageSwellsL1")
                        .HasColumnType("int");

                    b.Property<int?>("NrVoltageSwellsL2")
                        .HasColumnType("int");

                    b.Property<int?>("NrVoltageSwellsL3")
                        .HasColumnType("int");

                    b.Property<string>("PowerfailureLog")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.ComputedColumn);

                    b.Property<DateTime>("UpdatedOnAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.ComputedColumn);

                    b.HasKey("Id");

                    b.HasIndex("MeterId")
                        .IsUnique();

                    b.ToTable("ElectricityMeter");
                });

            modelBuilder.Entity("SmartMeterLogger.Data.Entities.ElectricityUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("ActPowerBackdeliveryL1")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("ActPowerBackdeliveryL2")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("ActPowerBackdeliveryL3")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal>("ActPowerL1")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("ActPowerL2")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("ActPowerL3")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal>("ActualBackdelivery")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal>("ActualDelivery")
                        .HasColumnType("decimal(10,3)");

                    b.Property<DateTime>("CreatedOnAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CurrentL1")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("CurrentL2")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("CurrentL3")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal>("DeltaActPowerBackdeliveryL1")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal>("DeltaActPowerBackdeliveryL2")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal>("DeltaActPowerBackdeliveryL3")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal>("DeltaActPowerL1")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal>("DeltaActPowerL2")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal>("DeltaActPowerL3")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal>("DeltaActualBackdelivery")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal>("DeltaActualDelivery")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal>("DeltaCurrentL1")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal>("DeltaCurrentL2")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal>("DeltaCurrentL3")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal>("DeltaTotalBackdeliveryHigh")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal>("DeltaTotalBackdeliveryLow")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal>("DeltaTotalDeliveryHigh")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal>("DeltaTotalDeliveryLow")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal>("DeltaVoltageL1")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal>("DeltaVoltageL2")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal>("DeltaVoltageL3")
                        .HasColumnType("decimal(10,3)");

                    b.Property<int>("MeterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.ComputedColumn);

                    b.Property<sbyte>("TariffIndicator")
                        .HasColumnType("tinyint");

                    b.Property<string>("TextMessage")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime");

                    b.Property<decimal>("TotalBackdeliveryHigh")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal>("TotalBackdeliveryLow")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal>("TotalDeliveryHigh")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal>("TotalDeliveryLow")
                        .HasColumnType("decimal(10,3)");

                    b.Property<DateTime>("UpdatedOnAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.ComputedColumn);

                    b.Property<decimal>("VoltageL1")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("VoltageL2")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("VoltageL3")
                        .HasColumnType("decimal(10,3)");

                    b.HasKey("Id");

                    b.HasIndex("MeterId");

                    b.ToTable("ElectricityUsages");
                });

            modelBuilder.Entity("SmartMeterLogger.Data.Entities.GasUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("DeltaTotalDelivery")
                        .HasColumnType("decimal(10,3)");

                    b.Property<int>("MeterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.ComputedColumn);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime");

                    b.Property<decimal>("TotalDelivery")
                        .HasColumnType("decimal(10,3)");

                    b.Property<DateTime>("UpdatedOnAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.ComputedColumn);

                    b.HasKey("Id");

                    b.HasIndex("MeterId");

                    b.ToTable("GasUsages");
                });

            modelBuilder.Entity("SmartMeterLogger.Data.Entities.Meter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<sbyte>("DeviceType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.ComputedColumn);

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("varchar(34)");

                    b.Property<DateTime>("UpdatedOnAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.ComputedColumn);

                    b.HasKey("Id");

                    b.ToTable("Meters");
                });

            modelBuilder.Entity("SmartMeterLogger.Data.Entities.ElectricityMeter", b =>
                {
                    b.HasOne("SmartMeterLogger.Data.Entities.Meter", "Meter")
                        .WithOne("ElectricityMeter")
                        .HasForeignKey("SmartMeterLogger.Data.Entities.ElectricityMeter", "MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("SmartMeterLogger.Data.Entities.ElectricityUsage", b =>
                {
                    b.HasOne("SmartMeterLogger.Data.Entities.Meter", "Meter")
                        .WithMany()
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("SmartMeterLogger.Data.Entities.GasUsage", b =>
                {
                    b.HasOne("SmartMeterLogger.Data.Entities.Meter", "Meter")
                        .WithMany()
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("SmartMeterLogger.Data.Entities.Meter", b =>
                {
                    b.Navigation("ElectricityMeter");
                });
#pragma warning restore 612, 618
        }
    }
}
